# -*- coding: utf-8 -*-
"""Task1- Customer Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15b8zQ5CD66BY0j-FU7QIlCuFKjNsW0XE
"""

# Commented out IPython magic to ensure Python compatibility.
#IMPORT THE LIBRARIES....
import numpy as np # linear algebra....
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)....
from matplotlib import pyplot as plt #Visualization of the data....
# %matplotlib inline
import seaborn as sns
import matplotlib
from datetime import date
import plotly.express as px
import plotly.graph_objects as go
import warnings
warnings.filterwarnings("ignore")
pd.set_option("display.max_columns",None)
pd.set_option("display.max_rows",None)

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

"""<header><h2><p style="background-image:url('https://wallpaperbat.com/img/127773-light-blue-and-yellow-wallpaper.jpg');font-family:Georgia;color:#000000;font-size:150%;text-align:center;border-radius:10px 10px;border-style: solid;border-width:5px;border-color:#000000;"><b>GENERAL:-</b></p></h2></header> """

#READ THE DATASET...
main_df = pd.read_csv("/content/marketing_campaign.csv", sep="\t")
main_df

df = main_df.copy()
df.head(5)

print("Shape of the DataFrame is :",df.shape)

print("Columns in DataFrame is :\n",df.columns)

print("Print a Summary of a Dataframe is :",df.info())

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:125%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>Basic statistics:-</b></p>"""

df.describe()

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:125%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>Detecting the missing values:-</b></p>"""

#PERCENTAGE OF THE MISSING VALUES
def missing_data(df):
    total = df.isnull().sum().sort_values(ascending = False)
    Percentage = (df.isnull().sum()/df.isnull().count()*100).sort_values(ascending = False)
    return pd.concat([total, Percentage], axis=1, keys=['Total', 'Percentage'])
missing_data(df)

#LETS VISUALISE THE MISSING VALUES PRESENT IN THE DATASET..
import missingno as mn
mn.matrix(df,color = (0,0,0))

#FILL THE MISSING VALUES WITH THE MEDIAN VALUES.. 
df['Income']=df['Income'].fillna(df['Income'].median())

#CHECKING IF ANY NAN IS PRESENT IN COLUMN OR NOT....
df.isna().any()

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:125%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>Detecting the duplicates:-</b></p>"""

df[df.duplicated()]

#FINDING THE NUMBER OF UNIQUE VALUES PRESENT IN EACH COLUMN...
df.nunique()

"""<header><p style= "background-color:#e9fafc;font-family:Georgia;color:#000000;font-size:100%;text-align:center;border-radius:10px 10px"><b>Note:-In above cell "Z_CostContact" and "Z_Revenue" have same value in all the rows that's why , they are not going to contribute anything in the model building. So we can drop them.</b></p></header>

<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:125%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>Droping the unwanted feature:-</b></p>
"""

df=df.drop(columns=["Z_CostContact", "Z_Revenue"],axis=1)
df.head(5)

"""<h2><p style="background-image: url('https://wallpaperbat.com/img/127773-light-blue-and-yellow-wallpaper.jpg');font-family:Georgia;color:#000000;font-size:150%;text-align:center;border-radius:10px 10px;border-style: solid;border-width:5px;border-color:#000000;"><b>UNIVARIATE ANALYSIS:-</b></p></h2>
<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>1.Analysis on Year_Birth Variable.</b></p>

"""

#CHECKING NUMBER OF UNIQUE CATEGORIES PRESENT IN THE "Year_Birth"
print("Unique categories present in the Year_Birth:",df["Year_Birth"].value_counts())

"""
<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>2.Analysis On Education Variable.</b></p>"""

df['Education'].unique()

#CHANGING CATEGORY INTO "UG" AND "PG" ONLY....
df['Education'] = df['Education'].replace(['PhD','2n Cycle','Graduation', 'Master'],'Post Graduate')  
df['Education'] = df['Education'].replace(['Basic'], 'Under Graduate')

#CHECKING NUMBER OF UNIQUE CATEGORIES PRESENT IN THE "Education"
print("Unique categories present in the Education:",df["Education"].value_counts())
print('\n')

#VISUALIZING THE "Education"
df['Education'].value_counts().plot(kind='bar',color = 'mediumblue',edgecolor = "black",linewidth = 3)
plt.title("Frequency Of Each Category in the Education Variable \n")

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>OBSERVATIONS:-</b></p>

<p style= "background-color:#e9fafc;font-family:Georgia;color:#000000;font-size:80%;text-align:center;border-radius:10px 10px"><b>*97.58% of Customers in the dataset are "Post Graduate".<br>
    *2.410% of Customers in the dataset are "Under Graduate".</b></p>

<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>3.Analysis On Marital_Status Variable.</b></p>
"""

df['Marital_Status'].unique()

#REPLACING THE CONFLICT VALUES IN Marital_status..
df['Marital_Status'] = df['Marital_Status'].replace(['Married', 'Together'],'Relationship')
df['Marital_Status'] = df['Marital_Status'].replace(['Divorced', 'Widow', 'Alone', 'YOLO', 'Absurd'],'Single')

#CHECKING NUMBER OF UNIQUE CATEGORIES PRESENT IN THE "Marital_Status"
print("Unique categories present in the Marital_Status:",df['Marital_Status'].value_counts())
print("\n")


#VISUALIZING THE "Marital_Status"
df['Marital_Status'].value_counts().plot(kind='bar',color = 'MediumBlue',edgecolor = "black",linewidth = 3)
plt.title("Frequency Of Each Category in the Marital_Status Variable \n")

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>OBSERVATIONS:-</b></p>

<p style= "background-color:#e9fafc;font-family:Georgia;color:#000000;font-size:80%;text-align:center;border-radius:10px 10px"><b>*64.46% of Customers in the dataset are in "Relationship".<br>
    *35.53% of Customers in the dataset are "Single".</b></p>

<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>4.Analysis On Income Variable.</b></p>
"""

#Maximum Income
df['Income'].max()

#Minimum Income
df['Income'].min()

#AverageIncome
df['Income'].mean()

sns.distplot(df["Income"],color = 'Mediumblue')
plt.show()
df["Income"].plot.box(figsize=(16,5),color = 'MediumBlue')
plt.show()

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>5.Analysis On "Kidhome,Teenhome" Variable.</b></p>

"""

df['Kidhome'].unique()

df['Teenhome'].unique()

# Combining different dataframe into a single column to reduce the number of dimension

df['Kids'] = df['Kidhome'] + df['Teenhome']

#CHECKING NUMBER OF UNIQUE CATEGORIES PRESENT IN THE "Kids"
print("Unique categories present in the Kids:",df['Kids'].value_counts())
print("\n")

#VISUALIZING THE "Kids"
df['Kids'].value_counts().plot(kind='bar',color = 'mediumblue',edgecolor = "black",linewidth = 3)
plt.title("Frequency Of Each Category in the Kids Variable \n")

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>OBSERVATIONS :-</b></p>
<p style= "background-color:#e9fafc;font-family:Georgia;color:#000000;font-size:80%;text-align:center;border-radius:10px 10px"><b>*50.35%  of Customers in the dataset have 1 kid.<br>
    *28.48%  of Customers in the dataset have no kids.<br>
    *18.79%  of Customers in the dataset have 2 kids.<br>
    *2.36%  of Customers in the dataset have 3 kids.</b></p>

<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>6.Analysis On "MntWines,MntMeatProducts,MntFishProducts,MntSweetProducts,MntGoldProds" Variable.</b></p>
"""

df['MntWines'].unique()

df['MntFruits'].unique()

df['MntMeatProducts'].unique()

df['MntFishProducts'].unique()

df['MntSweetProducts'].unique()

df['MntGoldProds'].unique()

# Combining different dataframe into a single column to reduce the number of dimension

df['Expenses'] = df['MntWines'] + df['MntFruits'] + df['MntMeatProducts'] + df['MntFishProducts'] + df['MntSweetProducts'] + df['MntGoldProds']
df['Expenses'].head(10)

#Minimum Expenses
df['Expenses'].min()

#Maximum Expenses
df['Expenses'].max()

#Average Expenses
df['Expenses'].mean()

sns.distplot(df["Expenses"],color = 'mediumblue')
plt.show()
df["Expenses"].plot.box(figsize=(16,5))
plt.show()

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>7.Analysis on "AcceptedCmp1,AcceptedCmp2,AcceptedCmp3,AcceptedCmp4,AcceptedCmp5" Variable.</b></p>"""

df['AcceptedCmp1'].unique()

df['AcceptedCmp2'].unique()

df['AcceptedCmp3'].unique()

df['AcceptedCmp4'].unique()

df['AcceptedCmp5'].unique()

df['TotalAcceptedCmp'] = df['AcceptedCmp1'] + df['AcceptedCmp2'] + df['AcceptedCmp3'] + df['AcceptedCmp4'] + df['AcceptedCmp5']

#CHECKING NUMBER OF UNIQUE CATEGORIES PRESENT IN THE "TotalAcceptedCmp"
print("Unique categories present in the TotalAcceptedCmp:",df['TotalAcceptedCmp'].value_counts())
print("\n")

#VISUALIZING THE "TotalAcceptedCmp"
df['TotalAcceptedCmp'].value_counts().plot(kind='bar',color = 'mediumblue',edgecolor = "black",linewidth = 3)
plt.title("Frequency Of Each Category in the TotalAcceptedCmp Variable \n")

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>OBSERVATIONS :-</b></p>
    
    
<p style= "background-color:#e9fafc;font-family:Georgia;color:#000000;font-size:80%;text-align:center;border-radius:10px 10px"><b>*79.33%  of Customers accepted the offer in the campaign are "0".<br> 
    *14.50%  of Customers accepted the offer in the campaign are "1".<br>
    *3.70%  of Customers accepted the offer in the campaign are "2".<br>
    *1.96%  of Customers accepted the offer in the campaign are "3".<br>
    *0.49%  of Customers accepted the offer in the campaign are "4".</b></p>

<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>8.Analysis on "NumWebPurchases,NumCatalogPurchases,NumStorePurchases,NumDealsPurchases" Variable.</b></p>
"""

df['NumWebPurchases'].unique()

df['NumCatalogPurchases'].unique()

df['NumStorePurchases'].unique()

df['NumDealsPurchases'].unique()

df['NumTotalPurchases'] = df['NumWebPurchases'] + df['NumCatalogPurchases'] + df['NumStorePurchases'] + df['NumDealsPurchases']
df['NumTotalPurchases'].unique()

#Minimum NumTotalPurchases
df['NumTotalPurchases'].min()

#Maximum NumTotalPurchases
df['NumTotalPurchases'].max()

#Mean NumTotalPurchases
df['NumTotalPurchases'].mean()

sns.distplot(df["NumTotalPurchases"],color = 'mediumblue')
plt.show()
df["NumTotalPurchases"].plot.box(figsize=(16,5),color = 'mediumblue')
plt.show()

# Deleting some column to reduce dimension and complexity of model

col_del = ["ID","AcceptedCmp1" , "AcceptedCmp2", "AcceptedCmp3" , "AcceptedCmp4","AcceptedCmp5","NumWebVisitsMonth", "NumWebPurchases","NumCatalogPurchases","NumStorePurchases","NumDealsPurchases" , "Kidhome", "Teenhome","MntWines", "MntFruits", "MntMeatProducts", "MntFishProducts", "MntSweetProducts", "MntGoldProds"]
df=df.drop(columns=col_del,axis=1)
df.head(10)

x = df.columns 
for i in x:
     print(i)

#NUMBER OF DAYS A CUSTOMER WAS ENGAGED WITH COMPANY...... 
#CHANGING "Dt_customer" into timestamp format......

df['Dt_Customer'] = pd.to_datetime(df.Dt_Customer)
df['First_day'] = '01-01-2015'
df['First_day'] = pd.to_datetime(df.First_day)
df['Day_engaged'] = (df['First_day'] - df['Dt_Customer']).dt.days

#ADDING A COLUMN "Age" IN THE DATAFRAME....
df['Age'] = (pd.Timestamp('now').year) - (pd.to_datetime(df['Dt_Customer']).dt.year)

#CHECKING NUMBER OF UNIQUE CATEGORIES PRESENT IN THE "Age"
print("Unique categories present in the Age:",df['Age'].value_counts())
print("\n")


#VISUALIZING THE "Age"
df['Age'].value_counts().plot(kind='bar',color = 'mediumblue',edgecolor = "black",linewidth = 3)
plt.title("Frequency Of Each Category in the Age Variable \n")

"""
<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>OBSERVATIONS:-</b></p>

<p style= "background-color:#e9fafc;font-family:Georgia;color:#000000;font-size:80%;text-align:center;border-radius:10px 10px"><b>*53.08% are 8 years old customers.<br>
    *24.86% are 7 years old customers.<br>
*22.05% are 9 years old customers.</b></p>"""

df.head(5)

df=df.drop(columns=["Dt_Customer", "First_day", "Year_Birth", "Dt_Customer", "Recency", "Complain","Response"],axis=1)
df.head(5)

#REARRANGE THE ORDER OF COLUMNS:-
order = [0,1,3,4,6,7,8,2,5]
df = df[[df.columns[i] for i in order]]
df.head(5)

df.shape

"""<header><h2><p style="background-image:url('https://wallpaperbat.com/img/127773-light-blue-and-yellow-wallpaper.jpg');font-family:Georgia;color:#000000;font-size:150%;text-align:center;border-radius:10px 10px;border-style: solid;border-width:5px;border-color:#000000;"><b>BIVARIATE ANALYSIS:-</b></p></h2></header>

<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>1.Education vs Expenses</b></p>
"""

pd.crosstab(df['Education'],df['Expenses'],margins=True)

fig = px.bar(df, x='Education', y='Expenses',color = 'Education')
fig.show()

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>2.Marital status vs Expenses</b></p>

"""

pd.crosstab(df['Marital_Status'],df['Expenses'],margins=True)

fig = px.bar(df, x='Marital_Status', y='Expenses',color = 'Marital_Status')
fig.show()

"""
<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>3.Kids vs Expenses</b></p>
"""

pd.crosstab(df['Kids'],df['Expenses'],margins=True)

fig = px.bar(df, x='Kids', y='Expenses',color = 'Kids')
fig.show()

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>4.TotalAcceptedCmp vs Expenses</b></p>

"""

pd.crosstab(df['TotalAcceptedCmp'],df['Expenses'],margins=True)

fig = px.bar(df, x ='TotalAcceptedCmp', y ='Expenses',color = 'TotalAcceptedCmp')
fig.show()

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>5.NumTotalPurchases vs Expenses</b></p>

"""

pd.crosstab(df['NumTotalPurchases'],df['Expenses'],margins=True).head()

fig = px.bar(df, x ='NumTotalPurchases', y ='Expenses',color = 'NumTotalPurchases')
fig.show()

fig = px.bar(df, x ='Day_engaged', y ='Expenses',color = 'Day_engaged')
fig.show()

fig = px.bar(df, x ='Age', y ='Expenses',color = 'Age')
fig.show()

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:125%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>Finding the correlation:-</b></p>"""

plt.figure(figsize=(10,8))
sns.heatmap(df.corr(), annot=True,cmap = 'YlGnBu',linewidths=1)

df.info()

cont_features = df.iloc[:, 2:9] 
print(type(cont_features))
print('\n')
print(cont_features.head())

import matplotlib
background_color = "#f6f5f5"

fig = plt.figure(figsize=(12, 8), facecolor=background_color)
gs = fig.add_gridspec(1, 1)
ax0 = fig.add_subplot(gs[0, 0])
colors = ["#2f5586", "#f6f5f5","#2f5586"]
colormap = matplotlib.colors.LinearSegmentedColormap.from_list("", colors)

ax0.set_facecolor(background_color)
ax0.text(-1.1, 1.25, 'Correlation of Continuous Features with Target', fontsize=20, fontweight='bold')

chart_df = pd.DataFrame(cont_features.corrwith(df['Expenses']))
chart_df.columns = ['corr']
sns.barplot(x=chart_df.index, y=chart_df['corr'], ax=ax0, color='mediumblue', zorder=3, edgecolor='black', linewidth=2)
ax0.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)
ax0.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)
ax0.set_ylabel('')

for s in ["top","right", 'left']:
    ax0.spines[s].set_visible(False)

plt.show()

"""
 <p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>OBSERVATIONS :-</b></p>
   
    
    
<p style= "background-color:#e9fafc;font-family:Georgia;color:#000000;font-size:80%;text-align:center;border-radius:10px 10px"><b>*Highest correlation between features is 0.7.<br>*There is no continuous features that has correlation with Expenses below 0.7 and above 0.15.<br>
*Day_engaged and Age has the lowest correlation with expenses,almost reaching 0.14 while NumTotalPurchases has the highest correlation with the expenses.</b></p>
"""

df.dtypes

cate = []
for i in df.columns:
    if (df[i].dtypes == "object"):
        cate.append(i)

print(" Object are:",cate)

Int = []
for i in df.columns:
    if (df[i].dtypes == "int64"):
        Int.append(i)

print(" Integers are:",Int)

Float = []
for i in df.columns:
    if (df[i].dtypes == "float64"):
        Float.append(i)

print("Float are:",Float)

from sklearn.preprocessing import LabelEncoder
lbl_encode = LabelEncoder()
for i in cate:
    df[i]=df[[i]].apply(lbl_encode.fit_transform)

df1 = df.copy()

from sklearn.preprocessing import StandardScaler
scaled_features = StandardScaler().fit_transform(df1.values)
sf_df = pd.DataFrame(scaled_features, index=df1.index, columns=df1.columns)

sf_df.head()

X = sf_df.iloc[:, [7, 3]].values
print(X)

"""<header><h2><p style="background-image:url('https://wallpaperbat.com/img/127773-light-blue-and-yellow-wallpaper.jpg');font-family:Georgia;color:#000000;font-size:150%;text-align:center;border-radius:10px 10px;border-style: solid;border-width:5px;border-color:#000000;"><b>ELBOW METHOD-NOW LETS FIND THE NUMBER OF CLUSTERS :-</b></p></h2></header> """

# Using the elbow method to find the optimal number of clusters
from sklearn.cluster import KMeans
wcss = []
for i in range(1, 18):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 50)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 18), wcss,color = "mediumblue",marker = '*')
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

"""<header><h2><p style="background-image:url('https://wallpaperbat.com/img/127773-light-blue-and-yellow-wallpaper.jpg');font-family:Georgia;color:#000000;font-size:150%;text-align:center;border-radius:10px 10px;border-style: solid;border-width:5px;border-color:#000000;"><b>KMEANS CLUSTERING:-</b></p></h2></header> 

"""

# Fitting K-Means to the dataset
kmeans = KMeans(n_clusters = 2, init = 'k-means++', random_state = 50)
y_kmeans = kmeans.fit_predict(X)

# Visualising the clusters
plt.figure(figsize= (15,8))
plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 25, c = 'mediumblue', label = 'Sensible Customers')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 25, c = 'lawngreen', label = 'Careless Customers')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 55, c = 'black', label = 'Centroids')
plt.title('Clusters of customers',fontsize = 20)
plt.xlabel('Income',fontsize = 15)
plt.ylabel('Expenses',fontsize = 15)
plt.legend(fontsize = 15)
plt.show()

"""<p style= "background-color:#000000;font-family:Georgia;color:#FFFFFF;font-size:110%;text-align:center;border-radius:10px 10px;border-style:solid;border-width:3px;border-color:#000000;"><b>OBSERVATIONS :-</b></p>

<p style= "background-color:#e9fafc;font-family:Georgia;color:#000000;font-size:70%;text-align:center;border-radius:10px 10px"><b>*Customer who has Low income and Low Expenses are Sensible customers.<br>
    *Customer who has Low income and High Expenses are Careless customers.</b></p>

<header><h2><p style="background-image:url('https://wallpaperbat.com/img/127773-light-blue-and-yellow-wallpaper.jpg');font-family:Georgia;color:#000000;font-size:150%;text-align:center;border-radius:10px 10px;border-style: solid;border-width:5px;border-color:#000000;"><b>OVERALL SUMMARY:-</b></p></h2></header> 
<p style= "background-color:#e9fafc;font-family:Georgia;color:#000000;font-size:110%;text-align:center;border-radius:10px 10px"><b>* The highest Birth rate of customers is 87.<\b><br>
<b>* 97.58% of the customers are "Post graduated"<\b><br>.
<b>* More than half of the customers are in a relationship - 64.46%.<\b><br>
<b>* Minimum Expenses - 5.<\b><br>
<b>* Maximum Expenses - 2525.<\b><br>
<b>* Mean Expenses - 605.7982.<\b><br>
<b>* 79.33% of the customers who accepted the offer in the campaign is 0.<\b><br> 
<b>* Minimum  NumTotalPurchases - 0.<\b><br>
<b>* Maximum NumTotalPurchases - 44.<\b><br>
<b>* Mean NumTotalPurchases - 14.8620.<\b><br>
<b>* More than half are 8 years old customers.<\b><br>
<b>* Minimum Income - 1730.<\b><br>
<b>* Maximum Income - 666666.<\b><br>
<b>* Mean Income - 52237.9754.<\b><br>
<b>* The highest Expenses rate for Post Graduated Customers is 97.58%.<\b><br>
<b>* The highest Expenses rate for Customers who are in a Relationship is 64.46%.<\b><br>
<b>* The highest Expenses rate for Customers who have one Kid is 50.35%.<\b><br>
<b>* The highest Expenses rate for Customers who accepted the offer in the campaign "0" is 79.33%.<\b><br>
<b>* The highest Expenses rate for 8 years old Customers is 53.08%.<\b><br></p>
"""